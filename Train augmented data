"from tensorflow.keras import layers",
				"from tensorflow.keras import models",
				
				"model = keras.models.Sequential()",
				
				"model.add(keras.layers.Conv2D(filters =32, kernel_size = (3,3), activation = 'relu', input_shape=(150,150,3)))",
				"model.add(keras.layers.MaxPooling2D(2,2))",
				"model.add(keras.layers.Conv2D(filters =64, kernel_size = (3,3), activation = 'relu', input_shape=(150,150,3)))",
				"model.add(keras.layers.MaxPooling2D(2,2))",
				"model.add(keras.layers.Conv2D(filters =128, kernel_size = (3,3), activation = 'relu', input_shape=(150,150,3)))",
				"model.add(keras.layers.MaxPooling2D(2,2))",
				"model.add(keras.layers.Conv2D(filters =128, kernel_size = (3,3), activation = 'relu', input_shape=(150,150,3)))",
				"model.add(keras.layers.MaxPooling2D(2,2))",
				
				
				
				"model.add(keras.layers.Flatten())",
				"model.add(keras.layers.Dropout(0.5))# to avoid over fitting",




				"model.add(keras.layers.Dense(512,activation = 'relu'))",
				"model.add(keras.layers.Dense(1,activation = 'sigmoid'))",
				"model.summary()",
				
				"from tensorflow.keras import optimizers",
				"model.compile(loss= 'binary_crossentropy', optimizer = optimizers.RMSprop(lr=1e-4), metrics = ['acc'])",
				
				"checkpoint_cb = keras.callbacks.ModelCheckpoint('Early_Stop_Best_Model.h5', save_best_only = True)",
				"early_stop_cb = keras.callbacks.EarlyStopping(patience =10, restore_best_weights = True)",
				
				"history = model.fit_generator(train_generator, steps_per_epoch =100, epochs = 100, validation_data = validation_generator, validation_steps = 50, callbacks = [checkpoint_cb, early_stop_cb] )",
				"del model",
				"keras.backend.clear_session()",
				"model = keras.models.load_model('Early_Stop_Best_Model.h5')",
				"pd.DataFrame(history.history).plot(figsize =(8,5))",
				"plt.grid(True)",
				"plt.gca().set_ylim(0,1)",
				"plt.show()"
