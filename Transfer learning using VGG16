"from tensorflow.keras.preprocessing.image import ImageDataGenerator",
				"train_datagen = ImageDataGenerator(rescale = 1./255, rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)",
				"test_datagen = ImageDataGenerator(rescale = 1./255)",
				"train_generator =  train_datagen.flow_from_directory(train_dir,target_size = (150,150), batch_size =20, class_mode = 'binary')",
				"validation_generator =  test_datagen.flow_from_directory(validation_dir,target_size = (150,150), batch_size =20, class_mode = 'binary')",
				
				"from tensorflow.keras.applications import VGG16",
				"conv_base = VGG16(weights = 'imagenet', include_top = False, input_shape = (150,150,3))",
				"conv_base.summary()",
				
				
				"from tensorflow.keras import layers",
				"from tensorflow.keras import models",
				
				"model = keras.models.Sequential()",
				
				
				"model.add(conv_base)",
				
				
				
				"model.add(keras.layers.Flatten())",

				"model.add(keras.layers.Dense(256,activation = 'relu'))",
				"model.add(keras.layers.Dense(1,activation = 'sigmoid'))",
				"model.summary()",
				"#not to optimise the weights of VGG16",
				"#conv_base.trainable = False",
				
				"from tensorflow.keras import optimizers",
				"model.compile(loss= 'binary_crossentropy', optimizer = optimizers.RMSprop(lr=1e-5), metrics = ['acc'])",
				
				"checkpoint_cb = keras.callbacks.ModelCheckpoint('Early_Stop_Best_Model.h5', save_best_only = True)",
				"early_stop_cb = keras.callbacks.EarlyStopping(patience =10, restore_best_weights = True)",
				
				"history = model.fit_generator(train_generator, steps_per_epoch =100, epochs = 3, validation_data = validation_generator, validation_steps = 50, callbacks = [checkpoint_cb, early_stop_cb] )",
				"del model",
				"keras.backend.clear_session()",
				"model = keras.models.load_model('Early_Stop_Best_Model.h5')",
				"pd.DataFrame(history.history).plot(figsize =(8,5))",
				"plt.grid(True)",
				"plt.gca().set_ylim(0,1)",
				"plt.show()"
